@page "/connectserver/{ServerId}"


<div id="terminal"></div>
@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    [Inject]
    private IServerApplication ServerApplication { get; set; }
    [Inject]
    private SwalService SwalService { get; set; }

    private HubConnection HubConnection { get; set; }
    public List<ConsoleMessageItem> Messages { get; set; } = new List<ConsoleMessageItem>();

    [Parameter]
    public string ServerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await ServerApplication.ConnectServer(new ConnectServerRequestModel { ServerId = ServerId });

        if (!result.IsSuccess)
        {
            SwalService.Show(new SwalOption
            {
                Category = SwalCategory.Error,
                Title = result.Message
            });
            return;
        }

        _ = InitConnect(result.Model);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (HubConnection.State != HubConnectionState.Connected) await HubConnection.StartAsync();
            await JSRuntime.InvokeVoidAsync("InitTerminal", DotNetObjectReference.Create(this), "terminal", 500);
            //JsRuntime.InvokeAsync()
        }
        try
        {
            await JSRuntime.InvokeVoidAsync("TerminalReload");
        }
        catch (Exception ex)
        {
            System.Console.WriteLine(ex.Message);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected Task InitConnect(string token)
    {

        HubConnection = new
            HubConnectionBuilder().WithUrl($"ws://127.0.0.1:5000/shell?user_id={token}").WithAutomaticReconnect().Build();
        HubConnection.On<string>("terminalstream", async s =>
            {
            await JSRuntime.InvokeVoidAsync("TerminalOutput", s);
            //Messages.Add(new ConsoleMessageItem { Message = s, Color = Color.Danger });
            //StateHasChanged();
        });
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task TerminalWrite(string str)
    {
        return Task.Run(() =>
            {
            HubConnection.SendAsync("terminalstream", str);
        });
    }

}