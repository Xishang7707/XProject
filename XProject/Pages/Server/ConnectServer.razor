@page "/connectserver/{ServerId}"
@*<Console Items="@Messages" Height="500" />*@
<Console Items="@Messages" Height="126" ShowAutoScroll="true" />
<div>
    @foreach (var item in Messages)
    {
        <p>@item.Message</p>
    }
</div>
@*@if (HubConnection != null && HubConnection.State == HubConnectionState.Connected)
    {
    }
    else
    {
        <Spinner SpinnerType="SpinnerType.Grow" Color="Color.Primary"></Spinner>
    }*@

@code {
    public List<ConsoleMessageItem> Messages { get; set; } = new List<ConsoleMessageItem> {
    new ConsoleMessageItem{Message="Test"}
    };

    [Inject]
    private IServerApplication ServerApplication { get; set; }

    [Inject]
    private SwalService SwalService { get; set; }

    private HubConnection HubConnection { get; set; }

    [Parameter]
    public string ServerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await ServerApplication.ConnectServer(new ConnectServerRequestModel { ServerId = ServerId });

        if (!result.IsSuccess)
        {
            SwalService.Show(new SwalOption
            {
                Category = SwalCategory.Error,
                Title = result.Message
            });
            return;
        }

        await InitConnect(result.Model);
    }

    protected async Task InitConnect(string token)
    {
        HubConnection = new HubConnectionBuilder().WithUrl($"ws://127.0.0.1:5000/shell?user_id={token}").WithAutomaticReconnect().Build();
        await HubConnection.StartAsync();
        HubConnection.On<string>("terminalstream", s =>
        {
            SwalService.Show(new SwalOption
            {
                Category = SwalCategory.Error,
                Title = s
            });
            Messages.Add(new ConsoleMessageItem { Message = s, Color = Color.Danger });
        });
    }

    //static SelectedItem[] LoginTypes = new SelectedItem[]
    //    {
    //        new SelectedItem("0", "默认"),
    //        new SelectedItem("1", "密码"),
    //        new SelectedItem("2", "密钥"),};

    //private async Task ClickAddServer()
    //{
    //    var result = await ServerApplication.AddServer(Model);

    //    SwalService.Show(new SwalOption
    //    {
    //        Category = result.IsSuccess ? SwalCategory.Success : SwalCategory.Error,
    //        Title = result.Message
    //    });

    //    if (result.IsSuccess)
    //        Model = new AddServerRequestModel();
    //}
}
